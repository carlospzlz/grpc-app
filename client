#!/usr/bin/env python3

import argparse
import os

import grpc

import app_pb2
import app_pb2_grpc


def parse_args():
    """
    Parses arguments given by the user in the command line.
    """
    description = (
        'Example client to request a number, string or file to the server')
    parser = argparse.ArgumentParser(description= description)
    parser.add_argument('IDENTIFIER',
                        help='Identifier of the resource requested')
    parser.add_argument('--request', '-r', required=True,
                        choices=['number', 'string', 'file'],
                        help='Type of data to request.')
    return parser.parse_args()

def getNumber(identifier, stub):
    """
    Requests the Number with name `identifier` to the server.
    """
    name = identifier
    response = stub.GetNumber(app_pb2.NumberRequest(name=name))
    print('Received Number: ' + str(response.number))

def getString(identifier, stub):
    """
    Requests the String with index `identifier` to the server.
    """
    if not identifier.isdigit():
        msg = 'ERROR: Identifier expected to be a valid index: {}'
        print(msg.format(identifier))
        return
    index = int(identifier)
    response = stub.GetString(app_pb2.StringRequest(index=index))
    print('Received String: ' + response.string_)

def getFile(identifier, stub):
    """
    Requests the File with filepath `identifier` to the server. This method
    will write the received file in the directory where the script runs from
    if it does not exist already.
    """
    filepath = identifier
    filename = os.path.basename(filepath)
    if os.path.isfile(filename):
        msg = 'ERROR: File already exists: {}'
        print(msg.format(filepath))
        return
    fileChunks = stub.GetFile(app_pb2.FileRequest(filename=filepath))
    with open(os.path.basename(filename), 'ba') as file_:
        for fileChunk in fileChunks:
            file_.write(fileChunk.content[:fileChunk.size])
    print('Received File: ' + filename)

GET = {
    'number': getNumber,
    'string': getString,
    'file': getFile,
}

def main():
    args = parse_args()
    with grpc.insecure_channel('localhost:50051') as channel:
        stub = app_pb2_grpc.DataServiceStub(channel)
        try:
            GET[args.request](args.IDENTIFIER, stub)
        except grpc.RpcError as e:
            print('ERROR: ' + str(e.code()) + ': ' + e.details())

if __name__ == '__main__':
    main()

